@page "/i";
@model RegisterOldModel
@{
    ViewData["Title"] = "Register";
    Layout = "_LayoutGuest";
}

<div class="text-center">
    <h1 class="display-4">Register</h1>
    
</div>
<form method="POST" name="registerForm" id="registerForm">
    <div class="d-grid  mt-3 col-12 justify-content-center">                    
        <input type="text" class="form-control" id="device" name="device" placeholder="Device Nickname (optional)" />                        
    </div>
    <div class="d-grid mt-3 col-12 justify-content-center">
        <button type="submit" class="btn btn-primary">Register with</button>            
    </div>
    <div class="m-4 d-flex justify-content-center">
        <div class="btn-group">
            <input type="radio" class="btn-check" name="authenticator" id="rPlatfrom" value="platform" autocomplete="off">
            <label class="btn btn-outline-primary" for="rPlatfrom">Platform</label>
    
            <input type="radio" class="btn-check" name="authenticator" id="rAny" value=""  autocomplete="off" checked>
            <label class="btn btn-outline-primary" for="rAny">Any</label>

            <input type="radio" class="btn-check" name="authenticator" id="rRoaming" value="cross-platform" autocomplete="off">
            <label class="btn btn-outline-primary" for="rRoaming">Roaming</label>
        </div>
    </div>
</form>

<div class="row">
  <div class="col-sm-2"></div>
  <div class="col-sm-4">
    <div class="card h-100 text-center" id="cardPlatform">
        <div class="card-body">
            <h5 class="card-title">Platform / Internal authenticators</h5>
            <p>
                Integrated into a laptop or a smartphone containing a trusted platfrom module.
            </p>
            <div class="list-group">
                <a href="#" class="list-group-item list-group-item-action">
                    <div class="d-flex w-100 justify-content-between">
                        <h5 class="mb-1">Biometrics</h5>
                        <small>unlocks with face / fingerprint</small>
                    </div>
                    <p class="mb-1">
                        Windows Hello, Face ID, Touch ID, etc.
                    </p>   
                </a>
                <a href="#" class="list-group-item list-group-item-action">
                    <div class="d-flex w-100 justify-content-between">
                        <h5 class="mb-1">PIN</h5>
                        <small>unlocks with code</small>
                    </div>
                    <p class="mb-1">
                        Windows Hello PIN, Smartphone PIN.
                    </p>              
                </a>
            </div>
        </div>
    </div>
  </div>
  <div class="col-sm-4">
    <div class="card h-100 text-center" id="cardRoaming">
        <div class="card-body">
            <h5 class="card-title">Roaming / External authenticators</h5>
            <p>
                A small USB Security Key with various connectivity options (USB-A, USB-C, NFC).
            </p>
            <div class="list-group">
                <a href="#" class="list-group-item list-group-item-action">
                    <div class="d-flex w-100 justify-content-between">
                        <h5 class="mb-1">USB Security Token</h5>
                        <small>Unlocks with touch / PIN / fingerprint</small>
                    </div>
                    <p class="mb-1">
                        We require user verification with PIN or fingerprint.
                    </p>   
                </a>
            </div>
        </div>
    </div>
  </div>
  <div class="col-sm-2"></div>
</div>

<script type="text/javascript">
    var rad = document.registerForm.authenticator;
    for (var i = 0; i < rad.length; i++) {
        rad[i].addEventListener('change', function() {
            var cardPlatform = document.getElementById("cardPlatform");
            var cardRoaming = document.getElementById("cardRoaming");
            if (this.value === "platform")
            {                
                cardPlatform.classList.add("border", "border-primary");
                cardRoaming.classList.remove("border", "border-primary");
            }
            else if (this.value === "cross-platform")
            {
                cardPlatform.classList.remove("border", "border-primary");
                cardRoaming.classList.add("border", "border-primary");
            }
            else if (this.value === "any")
            {
                cardPlatform.classList.remove("border", "border-primary");
                cardRoaming.classList.remove("border", "border-primary");
            }
        });
    }

document.getElementById('registerForm').addEventListener('submit', handleRegisterSubmit);

async function handleRegisterSubmit(event) {
    event.preventDefault();

    //let username = this.username.value;
    let displayName = this.device.value;

    // possible values: none, direct, indirect
    let attestation_type = "direct";
    // possible values: <empty>, platform, cross-platform
    let authenticator_attachment = this.authenticator.value;

    // possible values: preferred, required, discouraged
    let user_verification = "preferred";

    // possible values: true,false
    // NOTE: For usernameless scenarios, resident key must be set to true.
    let require_resident_key = "true";



    // prepare form post data
    var data = new FormData();
    //data.append('username', username);
    data.append('displayName', displayName);
    data.append('attType', attestation_type);
    data.append('authType', authenticator_attachment);
    data.append('userVerification', user_verification);
    data.append('requireResidentKey', require_resident_key);

    // send to server for registering
    let makeCredentialOptions;
    try {
        makeCredentialOptions = await fetchMakeCredentialOptions(data);

    } catch (e) {
        console.error(e);
        let msg = "Something went really wrong";
        showErrorAlert(msg);
    }


    console.log("Credential Options Object", makeCredentialOptions);

    if (makeCredentialOptions.status !== "ok") {
        console.log("Error creating credential options");
        console.log(makeCredentialOptions.errorMessage);
        showErrorAlert(makeCredentialOptions.errorMessage);
        return;
    }

    // Turn the challenge back into the accepted format of padded base64
    makeCredentialOptions.challenge = coerceToArrayBuffer(makeCredentialOptions.challenge);
    // Turn ID into a UInt8Array Buffer for some reason
    makeCredentialOptions.user.id = coerceToArrayBuffer(makeCredentialOptions.user.id);

    makeCredentialOptions.excludeCredentials = makeCredentialOptions.excludeCredentials.map((c) => {
        c.id = coerceToArrayBuffer(c.id);
        return c;
    });

    if (makeCredentialOptions.authenticatorSelection.authenticatorAttachment === null) makeCredentialOptions.authenticatorSelection.authenticatorAttachment = undefined;

    console.log("Credential Options Formatted", makeCredentialOptions);
/*
    Swal.fire({
        title: 'Registering...',
        text: 'Tap your security key to finish registration.',
        imageUrl: "/images/securitykey.min.svg",
        showCancelButton: true,
        showConfirmButton: false,
        focusConfirm: false,
        focusCancel: false
    });
*/

    console.log("Creating PublicKeyCredential...");

    let newCredential;
    try {
        newCredential = await navigator.credentials.create({
            publicKey: makeCredentialOptions
        });
    } catch (e) {
        var msg = "Could not create credentials in browser. Probably because the username is already registered with your authenticator. Please change username or authenticator."
        console.error(msg, e);
        showErrorAlert(msg, e);
    }


    console.log("PublicKeyCredential Created", newCredential);

    try {
        registerNewCredential(newCredential);

    } catch (e) {
        showErrorAlert(err.message ? err.message : err);
    }
}

async function fetchMakeCredentialOptions(formData) {
    let response = await fetch('/account/register/start', {
        method: 'POST', // or 'PUT'
        body: formData, // data can be `string` or {object}!
        headers: {
            'Accept': 'application/json'
        }
    });

    let data = await response.json();

    return data;
}


// This should be used to verify the auth data with the server
async function registerNewCredential(newCredential) {
    // Move data into Arrays incase it is super long
    let attestationObject = new Uint8Array(newCredential.response.attestationObject);
    let clientDataJSON = new Uint8Array(newCredential.response.clientDataJSON);
    let rawId = new Uint8Array(newCredential.rawId);

    const data = {
        id: newCredential.id,
        rawId: coerceToBase64Url(rawId),
        type: newCredential.type,
        extensions: newCredential.getClientExtensionResults(),
        response: {
            attestationObject: coerceToBase64Url(attestationObject),
            clientDataJSON: coerceToBase64Url(clientDataJSON)
        }
    };

    let response;
    try {
        response = await registerCredentialWithServer(data);
    } catch (e) {
        showErrorAlert(e);
    }

    console.log("Credential Object", response);

    // show error
    if (response.status !== "ok") {
        console.log("Error creating credential");
        console.log(response.errorMessage);
        showErrorAlert(response.errorMessage);
        return;
    }

    /*
    // show success 
    Swal.fire({
        title: 'Registration Successful!',
        text: 'You\'ve registered successfully.',
        type: 'success',
        timer: 2000
    });
    */

    // redirect to dashboard?
    //window.location.href = "/dashboard/" + state.user.displayName;
}

async function registerCredentialWithServer(formData) {
    let response = await fetch('/account/register/complete', {
        method: 'POST', // or 'PUT'
        body: JSON.stringify(formData), // data can be `string` or {object}!
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
    });

    let data = await response.json();

    return data;
}

</script>